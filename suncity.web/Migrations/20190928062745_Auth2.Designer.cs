// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Suncity.Web.Context;

namespace suncity.web.Migrations
{
    [DbContext(typeof(SuncityContext))]
    [Migration("20190928062745_Auth2")]
    partial class Auth2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Suncity.Web.Models.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressRegistrationId");

                    b.Property<int?>("AddressResidenceId");

                    b.Property<bool>("AgreedToMakeReports");

                    b.Property<bool>("AgreedToShareMedia");

                    b.Property<bool>("AgreedWithLiabilities");

                    b.Property<bool>("ConsentProcessingPersonalData");

                    b.Property<bool>("IsRussianCitizenship");

                    b.Property<string>("ProgrammInformationSource");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressRegistrationId");

                    b.HasIndex("AddressResidenceId");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Suncity.Web.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalComment");

                    b.Property<string>("AssessTheMoodOfTheChildBeforeAndAfterTheMeeting");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DescribeYourMoodAfterTheMeeting");

                    b.Property<int>("Duration");

                    b.Property<string>("Questions");

                    b.Property<bool>("Status");

                    b.Property<string>("TargetForNextMeeting");

                    b.Property<string>("WhatDidYouEndUpDoing");

                    b.Property<string>("WhatDidYouPlanToDoAtTheMeeting");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("suncity.web.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("suncity.web.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Suncity.Web.Models.Questionnaire", b =>
                {
                    b.HasOne("suncity.web.Models.Address", "AddressRegistration")
                        .WithMany()
                        .HasForeignKey("AddressRegistrationId");

                    b.HasOne("suncity.web.Models.Address", "AddressResidence")
                        .WithMany()
                        .HasForeignKey("AddressResidenceId");
                });
#pragma warning restore 612, 618
        }
    }
}
